import asyncio
import random
import requests
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

API_TOKEN = '7140261010:AAG4Yw-ZX-vmSVZiYtdoK8hMsM_YkUDAK4c'
BASE_URL = 'https://script.google.com/macros/s/AKfycbw05PInvb1sppOcBFroZmzaKqb6Njv-H34LSsKCHJsPUEoogDQ8AfCxIMI80VICSWQT0A/exec'

SHEET_USER_URL = BASE_URL + '?type=users'
SHEET_SKINS_URL = BASE_URL + '?type=skins'
SHEET_HISTORY_URL = BASE_URL + '?type=history'

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

user_sessions = {}
waiting_for_login = set()

def load_users_from_sheet():
    try:
        data = requests.get(SHEET_USER_URL).json()
        return [{
            'username': row['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'],
            'password': row['–ü–∞—Ä–æ–ª—å'],
            'balance': int(row['–ë–∞–ª–∞–Ω—Å'])
        } for row in data if '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' in row]
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", e)
        return []

def update_user_balance(username, new_balance):
    try:
        requests.post(SHEET_USER_URL, json={
            "action": "update_balance",
            "username": username,
            "new_balance": new_balance
        })
    except Exception as e:
        print("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å:", e)

def send_to_google_sheet(user, dropped_skin):
    try:
        requests.post(SHEET_HISTORY_URL, json={
            "username": user['username'],
            "skin": dropped_skin['–°–∫–∏–Ω'],
            "rarity": dropped_skin['–†–µ–¥–∫–æ—Å—Ç—å'],
            "quality": dropped_skin.get('–ö–∞—á–µ—Å—Ç–≤–æ', ''),
            "image_url": dropped_skin.get('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '')
        })
    except Exception as e:
        print("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥—Ä–æ–ø:", e)

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer("\U0001F44B –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ br0therscase bot!\n–ù–∞–ø–∏—à–∏ <b>/login</b> —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.")

@dp.message(F.text == "/login")
async def login(message: Message):
    waiting_for_login.add(message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: <code>ivan password123</code>")

@dp.message()
async def process_login(message: Message):
    user_id = message.from_user.id
    if message.text.startswith("/"):
        return
    if user_id not in waiting_for_login:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start –∏–ª–∏ /login.")
        return

    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    login, password = parts
    users = load_users_from_sheet()
    user = next((u for u in users if u['username'] == login and u['password'] == password), None)

    if user:
        user_sessions[user_id] = user['username']
        waiting_for_login.discard(user_id)
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ <b>{login}</b>\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{user['balance']}</b> –æ—á–∫–æ–≤")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

@dp.message(F.text == "/open_case")
async def open_case(message: Message):
    tg_id = message.from_user.id
    username = user_sessions.get(tg_id)

    if not username:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /login")
        return

    users = load_users_from_sheet()
    user = next((u for u in users if u['username'] == username), None)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if user['balance'] < 10 and username != 'admin':
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞. –ù—É–∂–Ω–æ 10 –æ—á–∫–æ–≤.")
        return

    try:
        skins_data = requests.get(SHEET_SKINS_URL).json()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–Ω–æ–≤.")
        return

    rarity_weights = {
        '–®–∏—Ä–ø–æ—Ç—Ä–µ–±': 76,
        '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ': 18,
        '–ê—Ä–º–µ–π—Å–∫–æ–µ': 4,
        '–ó–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ': 0.98,
        '–ó–∞—Å–µ–∫—Ä–µ—á–µ–Ω–Ω–æ–µ': 0.21,
        '–¢–∞–π–Ω–æ–µ': 0.05
    }
    rarity_buckets = {r: [] for r in rarity_weights}
    for row in skins_data:
        name = row.get('–°–∫–∏–Ω', '').strip()
        rarity = row.get('–†–µ–¥–∫–æ—Å—Ç—å', '').strip()
        image = row.get('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '').strip()
        if name and rarity and image and rarity in rarity_buckets:
            rarity_buckets[rarity].append(row)

    filtered_weights = {r: w for r, w in rarity_weights.items() if rarity_buckets[r]}
    if not filtered_weights:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤.")
        return

    chosen_rarity = random.choices(list(filtered_weights.keys()), weights=filtered_weights.values())[0]
    dropped_skin = random.choice(rarity_buckets[chosen_rarity])

    if username != 'admin':
        new_balance = user['balance'] - 10
        update_user_balance(username, new_balance)
    else:
        new_balance = user['balance']

    send_to_google_sheet(user, dropped_skin)

    name = dropped_skin['–°–∫–∏–Ω']
    quality = dropped_skin.get('–ö–∞—á–µ—Å—Ç–≤–æ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    rarity = dropped_skin['–†–µ–¥–∫–æ—Å—Ç—å']
    price = dropped_skin.get('–¶–µ–Ω–∞', '0')
    img = dropped_skin['–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è']

    text = (
        f"üéâ –í—ã–ø–∞–ª —Å–∫–∏–Ω: <b>{name}</b>\n"
        f"üíé –†–µ–¥–∫–æ—Å—Ç—å: <b>{rarity}</b>\n"
        f"‚öôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ: <b>{quality}</b>\n"
        f"üí∞ –¶–µ–Ω–∞: <b>{price} –æ—á–∫–æ–≤</b>\n"
        f"üíº –ë–∞–ª–∞–Ω—Å: <b>{new_balance} –æ—á–∫–æ–≤</b>"
    )

    kb = InlineKeyboardBuilder()
    kb.button(text="üíµ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell|{name}|{quality}")
    kb.button(text="üì¶ –í—ã–≤–µ—Å—Ç–∏", callback_data=f"withdraw|{name}|{quality}")
    kb.adjust(2)

    await message.answer_photo(photo=img, caption=text, reply_markup=kb.as_markup())

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())